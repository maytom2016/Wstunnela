name: Generated APK (Upload - Create Artifact To Github Action)

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  main_project_module: app
  playstore_name: Feng

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # 提取当前 Tag 并移除 'v' 前缀（例如 v1.0.0 → 1.0.0）
      - name: Extract version from tag
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      # 更新 build.gradle.kts 中的 versionName
      - name: Update versionName in build.gradle.kts
        run: |
          # 使用 sed 替换 versionName（兼容 Kotlin DSL）
          sed -i "s/versionName = \".*\"/versionName = \"${{ steps.extract_version.outputs.version }}\"/" ${{ env.main_project_module }}/build.gradle.kts
          # 打印修改后的文件（调试用）
          cat ${{ env.main_project_module }}/build.gradle.kts | grep versionName
          
      # 更新wstunnel
      - name: Run update_bin.sh
        run: bash ./update_bin.sh

      # 后续步骤（保持不变）
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Change wrapper permissions
        run: chmod +x ./gradlew

      - name: Run gradle tests
        run: ./gradlew test

      - name: Build gradle project
        run: ./gradlew build

      - name: Build APK release
        run: ./gradlew assemble

      - name: Sign APK
        uses: ilharp/sign-android-release@nightly
        with:
          releaseDir: ${{ env.main_project_module }}/build/outputs/apk/release
          signingKey: ${{ secrets.SIGNING_KEY }}
          keyAlias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Organize APK files
        run: |
          cd ${{ env.main_project_module }}/build/outputs/apk/
          mv ./release/app-release-unsigned-signed.apk ./release/app-release-signed.apk
          rm -rf ./release/app-release-un*
          rm -rf ./release/output-metadata.json
          tar -czvf release.tar.gz ./release

      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.date_today }} - ${{ env.playstore_name }} - APK Release
          path: ${{ env.main_project_module }}/build/outputs/apk/release/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          files: ${{ env.main_project_module }}/build/outputs/apk/release/app-release-signed.apk
